#Rozwiązywanie ARP, jeśli potrzebne
   JEŚLI packet.dst_ip NIE_ISTNIEJE w arp_table ZRÓB
       SendARPRequest(FF:FF:FF:FF:FF:FF)
       RETURN  ▷ Oczekujemy na odpowiedź ARP
   END IF

# MAIN
 PROCEDURE HandlePacket(packet)
 #Sprawdzenie, czy przepływ istnieje w tablicy przepływów
    FOR każdy flow_entry w flow_table DO
        IF flow_entry odpowiada packet THEN
            ForwardPacket(packet, flow_entry)
            RETURN
        END IF
    END FOR

#Wybór servera z najmniejszym obciążeniem
   selected_host ← SelectHostUsingWLC()
   dst_ip ← selected_host.ip
   dst_mac ← arp_table[packet.dst_ip]

#Dodanie przepływu do tablicy przepływów
   AddFlowToTable(src_ip, dst_ip, src_mac, dst_mac)
   AddReverseFlow(src_ip, dst_ip, src_mac, dst_mac)

# Przekazanie pakietu natychmiast za pomocą PacketOut
   SendPacketOut(dst_ip, dst_mac)

#Aktualizacja statystyk obciążenia hostów
   host.active_connections + 1
END PROCEDURE


# Algorytm WLC
PROCEDURE SelectHostUsingWLC()

  Lista Waga<1,2,3>
  Lista Liczba_Połączeń<c0,c1,c2>
  Lista Serwery<s1,s2,s3>

  for i in range(Serwery.size):
      pom = Liczba_Połączeń[i]/Waga[i]
      if(pom < wartość):
           wartość = min
           Serwer = Serwery[i]
  Return(serwer) 

END PROCEDURE


# FlowMod
PROCEDURE AddFlowToTable(src_ip, dst_ip, src_mac, dst_mac)
    flow_id ← GenerateFlowID()
    flow_table[flow_id] ← {src_ip, dst_ip, src_mac, dst_mac, timeout}
END PROCEDURE


# Reverse FlowMod
PROCEDURE AddReverseFlow(dst_ip, src_ip, dst_mac, src_mac)
    reverse_flow_id ← GenerateFlowID()
    flow_table[reverse_flow_id] ← {dst_ip, src_ip, dst_mac, src_mac, timeout}
END PROCEDURE
     
     
# PacketOut     
PROCEDURE SendPacketOut(packet)
#Utwórz wiadomość PacketOut
    message ← CreatePacketOutMessage(packet)
    Send message to Host
END PROCEDURE
